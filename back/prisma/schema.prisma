generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// recriando o banco de dados para ser mais otimizado, usando as migrations para modela-lo acompanhando
// o desenvolvimento do projeto, atualmente o banco de dados foi pensado apenas para os jogadores
// criarem e entrarem em salas de jogos

model Room {
  id          String      @id @default(uuid())
  code        String      @unique
  password    String?
  maxRounds   Int         @default(10)
  maxPlayers  Int         @default(4)
  players       Player[]  
}

model Player {
  id        String      @id @default(uuid())
  name      String
  score     Int         @default(0)
  isHost    Boolean     @default(false)
  avatar    String?
  roomId    String?
  room      Room?       @relation(fields: [roomId], references: [id])
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// enum RoomState {
//   OPEN
//   CLOSED
//   IN_PROGRESS
// }

// model Language {
//   id       Int    @id @default(autoincrement())
//   language String
//   Room     Room[]
//   Word     Word[]
// }

// model Room {
//   id              Int        @id @default(autoincrement())
//   code            String     @unique
//   password        String?
//   state           RoomState?
//   language_id     Int?
//   language        Language?  @relation(fields: [language_id], references: [id])
//   max_players     Int?
//   max_rounds      Int?
//   current_round   Int?
//   current_word_id Int?
//   word            Word?       @relation(fields: [current_word_id], references: [id])

//   wordsSorted WordSorted[]
//   guesses Guess[]
//   players Player[]
// }

// model Player {
//   id       Int     @id @default(autoincrement())
//   name     String
//   score    Int?
//   photo    String?
//   is_admin Boolean
//   room_id  Int
//   room     Room    @relation(fields: [room_id], references: [id])
//   id_socket String?
//   guesses  Guess[]
// }

// enum MusicApi {
//   genius
//   vagalume
//   musixmatch
// }

// model Guess {
//   id                 Int     @id @default(autoincrement())
//   artist_name        String
//   song_name          String
//   is_correct         Boolean?
//   selected_music_id  Int?
//   selected_music_api MusicApi?
//   player_id          Int
//   player             Player  @relation(fields: [player_id], references: [id])
//   room_id            Int
//   room               Room    @relation(fields: [room_id], references: [id])
// }

// model Word {
//   id          Int      @id @default(autoincrement())
//   word        String
//   language_id Int
//   language    Language @relation(fields: [language_id], references: [id])
//   wordSorted WordSorted[]

//   Rooms Room[]
// }

// model WordSorted {
//   id      Int    @id @default(autoincrement())
//   word_id Int
//   word    Word   @relation(fields: [word_id], references: [id])
//   room_id Int
//   room    Room   @relation(fields: [room_id], references: [id])
// }
